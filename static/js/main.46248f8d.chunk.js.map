{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","xIsNext","stepNumber","slice","length","calculateWinner","console","log","setState","concat","step","status","current","winner","moves","map","move","desc","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"wOAIA,SAASA,EAAOC,GACV,OACE,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACGF,EAAMG,Q,IAKXC,E,kKAGF,SAAaC,GAAI,IAAD,OACd,OAAO,cAACN,EAAD,CACPI,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,WAAK,EAAKF,MAAME,QAAQG,Q,oBAInC,WAEE,OACE,gCACE,sBAAKJ,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,a,GA3BXC,IAAMC,WAkCpBC,E,kDACF,WAAYX,GAAO,IAAD,8BACd,cAAMA,IACDY,MAAQ,CACTC,QAAS,CAAC,CACNN,QAASO,MAAM,GAAGC,KAAK,QAE3BC,SAAS,EACTC,WAAY,GAPF,E,+CAWlB,SAAYZ,GACR,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMK,WAAa,GAE9DV,EADUM,EAAQA,EAAQM,OAAO,GACfZ,QAAQW,QAC7BE,EAAgBb,IAAYA,EAAQF,KAGvCgB,QAAQC,IAAI,YACZf,EAAQF,GAAKC,KAAKM,MAAMI,QAAU,IAAM,IACxCV,KAAKiB,SAAS,CACVV,QAASA,EAAQW,OAAO,CAAC,CACzBjB,QAASA,KAEbU,WAAYJ,EAAQM,OACpBH,SAAUV,KAAKM,MAAMI,a,oBAGzB,SAAOS,GACHnB,KAAKiB,SAAS,CACVN,WAAYQ,EACZT,QAAUS,EAAO,IAAO,M,oBAIhC,WAAU,IAgBNC,EAhBK,OAEHb,EAAUP,KAAKM,MAAMC,QACrBc,EAAUd,EAAQP,KAAKM,MAAMK,YAC7BW,EAASR,EAAgBO,EAAQpB,SAEjCsB,EAAQhB,EAAQiB,KAAI,SAACL,EAAMM,GAC7B,IAAMC,EAAOD,EAAO,gBAAkBA,EAAO,iBAC7C,OACI,6BACI,wBAAQ7B,QAAS,kBAAM,EAAK+B,OAAOF,IAAnC,SAA2CC,KADtCD,MAaf,OAJEL,EADDE,EACU,iEAAiBA,EAEpB,iGAAuBtB,KAAKM,MAAMI,QAAU,IAAM,KAGxD,sBAAKf,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,CACIG,QAASoB,EAAQpB,QACjBL,QAAS,SAACG,GAAD,OAAK,EAAK6B,YAAY7B,QAGrC,sBAAKJ,UAAU,YAAf,UACE,8BAAMyB,IACN,6BAAKG,c,GApEEpB,IAAMC,WAkFzB,SAASU,EAAgBb,GAWrB,IAVA,IAAM4B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA9B,EAAI,EAAGA,EAAI8B,EAAMhB,OAAQd,IAAK,CAAC,IAAD,cACnB8B,EAAM9B,GADa,GAC9B+B,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAI/B,EAAQ6B,IAAM7B,EAAQ6B,KAAO7B,EAAQ8B,IAAM9B,EAAQ6B,KAAO7B,EAAQ+B,GACpE,OAAO/B,EAAQ6B,GAGnB,OAAO,KAtBXG,IAASC,OACL,cAAC7B,EAAD,IACA8B,SAASC,eAAe,W","file":"static/js/main.46248f8d.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props){\r\n      return (\r\n        <button className=\"square\" onClick={props.onClick}>\r\n          {props.value}\r\n        </button>\r\n      );\r\n  }\r\n  \r\nclass Board extends React.Component {\r\n\r\n\r\n    renderSquare(i) {\r\n      return <Square \r\n      value={this.props.squares[i]}\r\n      onClick={()=>{this.props.onClick(i)}}    \r\n      />;\r\n    }\r\n  \r\n    render() {\r\n \r\n      return (\r\n        <div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n  \r\nclass Game extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null)\r\n            }],\r\n            xIsNext: true,\r\n            stepNumber: 0\r\n        }\r\n    }\r\n\r\n    handleClick(i){\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length-1];\r\n        const squares = current.squares.slice();\r\n        if(calculateWinner(squares) || squares[i]){\r\n            return;\r\n        };\r\n        console.log('click sq');\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{\r\n            squares: squares\r\n        }]),\r\n        stepNumber: history.length,\r\n        xIsNext: !this.state.xIsNext})\r\n    }\r\n\r\n    jumpTo(step){\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        })\r\n    }\r\n\r\n    render() {\r\n    \r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    const moves = history.map((step, move) =>{\r\n        const desc = move ? \"back to move#\" + move : \"Back to begin!\";\r\n        return(\r\n            <li key={move}>\r\n                <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n            </li>\r\n            \r\n        )\r\n    })\r\n\r\n    let status;\r\n    if(winner){\r\n        status = 'Победитель: ' + winner;\r\n    } else{\r\n        status = `Следующий игрок: ${this.state.xIsNext ? 'X' : 'O'}`;\r\n    }\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board \r\n                squares={current.squares}\r\n                onClick={(i)=>this.handleClick(i)}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n  \r\n  // ========================================\r\n  \r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n  \r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }"],"sourceRoot":""}